@* Contact Index *@  
@page "/contacts"
@attribute [Authorize]
@rendermode InteractiveServer

@inject ICategoryDTOService categoryService
@inject IContactDTOService contactService
@inject NavigationManager navManager

<PageTitle>Black Book Pro | Contacts</PageTitle>

<div class="container">
    <div class="row mt-3">
        <div class="col">
            <h1>All Contacts</h1>
        </div>
        @if (HasContacts)
        {
            <div class="col text-end">
                <NavLink class="btn btn-primary rounded pill"
                         href="/contacts/create">
                    Create New Contact
                </NavLink>
            </div>
        }

    </div>
    <div class="row gy-3">
        @* Search / Filter column – render only when contacts exist *@
        @if (HasContacts)
        {
            <div class="col-12 col-lg-4">
                <form>
                    <div class="input-group mb-3">
                        <InputText class="form-control border-0 rounded-2 ps-1"
                                   type="search"
                                   placeholder="Search Contacts"
                                   @bind-Value="searchInput" />
                        <input type="submit" class="btn btn-primary" value="Search" />
                    </div>
                </form>
                <div>
                    <label class="form-label mt-4">Filter by Category</label>
                    <InputSelect class="form-select" @bind-Value="CategoryId">
                        <option value="">All Categories</option>
                        @foreach (var category in categories ?? Enumerable.Empty<CategoryDTO>())
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="mt-3">
                    @if (!string.IsNullOrEmpty(toastMessage))
                    {
                        <ToastMessage @key="messageID" Message="@toastMessage" Color="@messageColor" />

                    }
                </div>
            </div>
        }
        <!-- Contacts / Empty-state column -->
        <div class="@(HasContacts ? "col-12 col-lg-8" : "col-12") mb-5">

            @if (HasContacts)
            {
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1">
                    @foreach (var contact in contacts!.OrderBy(c => c.LastName)
                                    .ThenBy(c => c.FirstName))
                    {
                        <div class="col">
                            <ContactCard Contact="contact" OnDelete="DeleteContact" />
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <!-- Restrict the width once and let everything inside follow it -->
                    <div class="text-center" style="max-width:22rem;">
                        <!-- image -->
                        <img src="img/shrug.png"
                             class="img-fluid"
                             alt="Cartoon person shrugging" />

                        <!-- headline -->
                        <p class="fs-4 mb-3 yellow no-contacts-headline ">
                            No contacts found.
                        </p>

                        <!-- CTA button -->
                        <NavLink class="btn btn-primary w-100 rounded-pill border border-1 btnShadow"
                                 href="/contacts/create">
                            Let&rsquo;s Create a Contact
                        </NavLink>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int? CategoryId { get; set; }


    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    private UserInfo? userInfo;
    private IEnumerable<ContactDTO>? contacts = Array.Empty<ContactDTO>();
    private IEnumerable<CategoryDTO>? categories = Array.Empty<CategoryDTO>();

    private bool HasContacts => contacts?.Any() == true;
    private string searchInput = string.Empty;
    private string? toastMessage;
    private string? messageColor;
    private Guid messageID = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        try
        {
            categories = await categoryService.GetCategoriesAsync(userInfo!.UserId);
            // contacts = await contactService.
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        userInfo ??= await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        CategoryId = null;

        try
        {
            //Grab a list of contacts for the user
            contacts = await contactService.GetContactsAsync(userInfo!.UserId);

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
        }
    }
    private async Task DeleteContact(int Id)
    {
        try
        {
            await contactService.DeleteContactAsync(Id, userInfo!.UserId);
            contacts = contacts?.Where(c => c.Id != Id) ?? Enumerable.Empty<ContactDTO>();
            ShowToastMessage("Success! Contact deleted");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ShowToastMessage("Oops! Something went wrong. Try again later.");

        }
    }

    private void ShowToastMessage(string message)
    {
        toastMessage = message;
        if (message.Contains("wrong"))
        {
            messageColor = "danger";
        }
        else
        {
            messageColor = "success";
        }
        messageID = Guid.NewGuid();
    }
}


