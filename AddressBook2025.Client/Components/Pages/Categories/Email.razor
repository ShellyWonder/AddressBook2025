@* Category Email *@
@page "/categories/email/{categoryId:int}"
@attribute [Authorize]
@rendermode InteractiveServer

@inject ICategoryDTOService categoryDTOService
@inject NavigationManager navManager


<PageTitle>Black Book Pro | Email Category</PageTitle>

@if (emailData is not null)
{
    <div class="container">
        <div class="card shadow-lg my-3">
            <div class="card-body">
                <EmailForm EmailData="emailData" OnSubmit="SendEmail" />
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public int CategoryId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private CategoryDTO? category;
    private UserInfo? userInfo;
    private EmailData? emailData;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask!);
            category = await categoryDTOService.GetCategoryByIdAsync(CategoryId, userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

        if (category is not null)
        {
            emailData = new EmailData()
            {
                //returns an array of contacts with one field, email, separated with a semi-colon(";");
                Recipients = string.Join(";",category.Contacts.Select(category => category.Email)),
                Subject = $"Group message for {category.Name}",
                Body = string.Empty
            };
        }
        else
        {
            navManager.NavigateTo("/contacts");
        }
    }

    private async Task SendEmail(EmailData formEmailData)
    {
        string message = "Something went wrong. Please try again later.";
        //call email service

        //navigate to Contact Page
        navManager.NavigateTo($"/contacts?message={message}");
    }
}
